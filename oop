//index.php
1
function greet($greeting){

echo 'Heloo'.$greeting;

}
greet ('Whats up');

2
function greet($greeting,$name){

echo $greeting.''.$name;

}
greet ('Whats up','Brad');

3
function greet($greeting,$name='Brad'){

echo strtoupper($greeting.' '.$name);
}
greet('Whats up');

class my_public {
    public function myfunc() {
        $val = "Hello I am public function"; 
        return $val;
    }
}
class my_static_public {
    public static function myfunc() {
        $val = "Hello I am public static function";
        return $val;
    }
}

// Access Test
$mytest = new my_public();
print $mytest->myfunc();  // returns 'Hello I am public function'
print my_static_public::myfunc(); //  returns 'Hello I am public static function'




Practise website
<?php
define("GREETING","Hello you! How are you today?");
echo constant("GREETING");
?>
define ("CONSTANT", "Hello world.");
echo CONSTANT;

config.php
define('DB_HOST','localhost');
define('DB_USER','root');
define('DB_PASS','');
define('DB_NAME','db_realEstate');




database.php

include config/config.php

class Database{
public $host =DB_HOST; //HERE WE CAN WRITE directly names but we do it clearly
public $user =DB_USER;
public $pass =DB_PASS;
public $dbname=DB_NAME;

public $link;
public $error;

public function __construct(){
$this->connectDB();
}

public function connectDB(){

$this->link=new mysqli($this->host,$this->user,$this->pass,$this->dbname);
  if(!$this->link){
  $this->error="Connection Failed".$this->link->connect_error;
  return false;
  }

}

public function select($query){
    $result=$this->link->query($query) or die($this->link->error.__LINE__);
    if($result->num_rows >0){
      return $result;
    }else{
      return false; 
    }

}
public function insert($query){
    $result=$this->link->query($query) or die($this->link->error.__LINE__);
    if($result->num_rows >0){
      return $result;
    }else{
      return false; 
    }

}
public function update($query){
    $result=$this->link->query($query) or die($this->link->error.__LINE__);
    if($result->num_rows >0){
      return $result;
    }else{
      return false; 
    }

}
public function delete($query){
    $result=$this->link->query($query) or die($this->link->error.__LINE__);
    if($result->num_rows >0){
      return $result;
    }else{
      return false; 
    }

}











}











session.php


class Session {
  
  public static function init(){
      if(version_compare(phpversion(),'5.4.0','<')){
      
        if(session_id()==''){
          session_start();
          }
        }else{
          if(session_status()==PHP_SESSION_NONE){
            session_start();
          }
          
        }
      
      }
      
      
 public static  function  set($key, $val){
     $_SESSION[$key]=$val;
  }
  
  public static function  get($key){
    
    if(isset($_SESSION[$key])){
     return  $_SESSION[$key];
    }else{
     return false;
    }
  
  }
  
  
  public function checkSession(){
    
    self::init();
    if(self::get('agentLogin')==false){
    self::destroy();
    header("Location:login.php");
    
    } 
  
  }
  
    public function checkLogin(){
    
    self::init();
    if(self::get('agentLogin')==false){
    self::destroy();
    header("Location:index.php");
    
    } 
  
  }
  
  
public static function destroy(){
  session_destroy();
  header("Location:login.php");

}
  
  
 
}    
      
      


helpers/format.php

class Format{

public function validation ($data){
  $data=trim($data);
  $data=stripcslashes($data);
  $data=htmlspecialchars($data);
  return $data;

}

}




classes/agent.php

include_once 'helpers/format.php';
include_once  'lib/database.php';

class Agent{
  private $fm;
  private $db;
  
  public function __construct(){
    
    $this->fm=new Format();
    $this->db=new Database()
  }
  
  The same thing we do with agentlogin
  
  agentLogin.php
 include_once 'helpers/format.php';
include_once  'lib/database.php';

Session::checkLogin();
?>
class Agent{
  private $fm;
  private $db;
  
  public function __construct(){
    
    $this->fm=new Format();
    $this->db=new Database()
  }
  
  
  
  
  
  
  
  
  public function agentRegistration($data){
    $name=mysqli_real_escape_string($this->db->link,$data['name']);
    $name=mysqli_real_escape_string($this->db->link,$data['adress']);
    $name=mysqli_real_escape_string($this->db->link,$data['email']);
    $name=mysqli_real_escape_string($this->db->link,$data['phone']);
    $name=mysqli_real_escape_string($this->db->link,$data['pass']);// at the same time we should create a table called tbl_agent with those tables
    
    $name=$this->fm->validation($name);
     $name=$this->fm->validation($adress);//fm variable from Format class
    $name=$this->fm->validation($email);
    $name=$this->fm->validation($phone);
    $name=$this->fm->validation($password);
    
    if(empty($name) or empty($adress) or empty($phone) or empty($email)){
        
        $msg="<span class='error'>Fields must not be empty</span>";
        return $msg;
    
    }
    
    $emailQuery="SELECT * FROM tbl_agents WHERE email='$email' LIMIT 1";
    $result=$this->db->select($emailQuery);
    
    if($result){
       $msg="<span class='error'>Email is already exists</span>";
        return $msg;
    }else{
         
       $query="INSERT INTO tbl_agents(name,adress,email,phone,password) VALUES('name','$address','$mail','$phone','password')";
       $row=$this->db->insert($query);
      if($row){
        $msg="<span class='success'>Registration success</span>";
        return $msg;
      }else{
        $msg="<span class='error'>Something WENT WRONG</span>";
        return $msg;
      }
    }
    
  }

}






login.php
//here locatid html of login form

include_once 'classes/agent.php';

$ag=new Agent();

if($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['register'])){

$agentReg=$ag->agentRegistration($_POST);//after that we are going to the agent.php

}


after div

<?php
if(isset($agentRag)){
    echo $agentReg;
}


?>




//when you are extending two methods with the same name you use parent:: in order to call the other mmethod
<?php

class test{
	protected $adsoyad='Tayfun erdibel';
	public function merhaba(){

		return 'merhabwwa';
	}
}


class test2 extends test{

	public function dunya(){
		return 'dunya'.$this->merhaba();
	}
	public function merhaba(){

		return parent::merhaba();
	}

	public function adsoyad(){
		return $this->adsoyad;
	}

}


$test2=new test2();

echo $test2->dunya();
echo $test2->merhaba();


class Test{
	public $a="Hello";
	public static $b='Tesst2';
	static public function hello(){
		//return "Hello world";
		return self::$a;
	}
}

echo Test::hello();










